Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]



//python 

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        result = []
        if(numRows==0):
            return result
        firs = [1]
        result.append(firs)
        for i in range(1,numRows):
            prev = result[i-1]
            curr =[1]
            for j in range(1,i):
                curr.append(prev[j-1]+prev[j])
            curr.append(1);
            result.append(curr);
        return result





JAVA
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();
        if(numRows == 0){
            return result;
        }
        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(1);
        result.add(firstRow);
        for(int i=1;i<numRows;i++)
        {
            List<Integer> prev = result.get(i-1);
            List<Integer> curr = new ArrayList<>();
            curr.add(1);
            for(int j=1;j<i;j++){
                curr.add(prev.get(j-1)+prev.get(j));
            }
            curr.add(1);
            result.add(curr);
        }
        return result;

    }
}
